<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bhamburg.github.io]]></title>
  <link href="http://bhamburg.github.io/atom.xml" rel="self"/>
  <link href="http://bhamburg.github.io/"/>
  <updated>2014-03-07T00:04:10-05:00</updated>
  <id>http://bhamburg.github.io/</id>
  <author>
    <name><![CDATA[Brian Hamburg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 2: Installed Octopress]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/06/day-2-installed-octopress/"/>
    <updated>2014-03-06T22:11:14-05:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/06/day-2-installed-octopress</id>
    <content type="html"><![CDATA[<p>Today was a day of great progress. After reading up on the benefits of Octopress, I decided to delete my Jekyll repository and start from scratch with a clone of <a href="https://github.com/imathis/octopress">Octopress</a>. Since you are reading this, it means my installation was successful and I can now track my daily efforts towards denoobification. I admit that just the install turned out to be an excellent learning experience because the process didn&rsquo;t go as smoothly as the Octopress documentation lead me to believe it would.</p>

<h3>Not So Fast</h3>

<p>The first problem I noticed was that I was only running Ruby 1.8.7 since it is the default version in OS X Mountain Lion which is what I&rsquo;m running on this iMac. The Octopress documentation recommends to upgrade to Ruby 1.9.3 via <code>rbenv</code>. For reasons outlined in <a href="http://blog.zerosharp.com/installing-ruby-with-homebrew-and-rbenv-on-mac-os-x-mountain-lion/">this article</a>, I was unable to do so before installing GCC. After that crucial step I was back on track via the documentation to upgrade Ruby, install Octopress, deploy to GitHub Pages, and get to blogging!</p>

<h3>Portability Problem</h3>

<p>Another issue I ran into was the fact that I did my initial push from my iMac but would be doing most of my blogging from my laptop. This didn&rsquo;t hold me up for long thanks to another article on
<a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">zerosharp</a>.</p>

<h3>Learning The Lingo, Making it Mine</h3>

<p>Now that everything is up and running, the next step was to learn the lay of the land. The first thing I noticed is that Octopress blog posts use <a href="http://daringfireball.net/projects/markdown">Markdown</a>, which is something I have no prior experience with. After poking around for a few minutes, I managed to learn enough syntax to write this post (and go back and fix yesterday&rsquo;s post). I really like the ability to add <code>code</code> tags so easily.</p>

<p>I had a few hours when I got home tonight to get a feel for how Octopress is structured and managed to make some changes to <code>_layout.scss</code> and <code>_typography.scss</code> and added my logo to the header and favicon. Overall, I&rsquo;m very pleased with tonight&rsquo;s results. Here are before and after shots.</p>

<p><img src="http://bhamburg.github.io/images/before.png" style="height: 45%; width: 45%;" /> <img src="http://bhamburg.github.io/images/after.png" style="height: 45%; width: 45%; float: right;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 1: Commence Denoobification]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/05/day-1-commence-denoobification/"/>
    <updated>2014-03-05T21:07:14-05:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/05/day-1-commence-denoobification</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always been a dabbler. I used to dabble in DOS and Windows configuration and eventually did it long enough to get my first real job doing technical support. I dabbled in banjo enough to make it to the front line of the <a href="http://fralinger.org">Fralinger String Band</a> and make a pretty steady side gig out of it. I dabbled in HTML, CSS, and JavaScript enough to make a career as a front-end web developer. Since then, I&rsquo;ve dabbled in C++, Java, PHP, Python, and C# (the latter just enough to gain my <a href="http://brianhamburg.com/resume/">Sitecore developer certification</a> even though I much prefer working on my <a href="http://github.com/bhamburg">open-source projects</a>). With all of that dabbling, I&rsquo;ve become very much an IT generalist (that happens to play banjo). A jackass of all trades, if you will. This has taken me pretty far in life, but even more importantly it&rsquo;s shown me how much I don&rsquo;t know and should know to take my career to the next level, namely a strong understanding of programming in the real world.</p>

<h3>Become a <code>Ruby</code> Developer</h3>

<p>Just from conversations with my colleages and reading articles on the web, I started to gain an interest in taking my career further in open-source development. I&rsquo;ve heard of Ruby on Rails and knew it was the latest hot trend in webdev, but I couldn&rsquo;t tell you much about it other than the seemingly well-paid pros were cool characters who shared a lot on GitHub. Then, in my daily Internet stumblings, I happened to read this page: <a href="http://rubycon.rkcudjoe.com/become-a-ruby-developer/">Become a Ruby Developer</a></p>

<p>I really like what Raymond Cudjoe has put together here and, based on the book reviews and other articles I read, his advice seems to be solid. I&rsquo;ve decided to dive into this guide and become a Ruby developer. My inner geek is calling me to get serious. <strong>Consider this <del>Jekyll</del> Octopress blog his <em>Retrospection #1</em> assignment.</strong> I plan to read <em>The Passionate Programmer</em> over the next week or so. I&rsquo;m looking forward reporting my progress here, keeping track of everything that I have learned along the way.</p>

<h3>GitHub</h3>

<p>Prior to 2012, my only exposure to version control had been Dreamweaver&rsquo;s check-in feature. Once I started working at Jefferson Hospital, I was introduced to Subversion using a GUI without much command line interaction. My cursory knowledge of such an important aspect of a front- or back-end developer&rsquo;s world needs to change. I&rsquo;m going to make a concerted effort to become a Git expert and contribute to GitHub regularly as I learn Ruby and continue to work on my other projects. I&rsquo;ve found a good starting point in this effort to be <a href="http://gitimmersion.com/">Git Immersion</a>. Check out my very first Ruby program and contribution to GitHub below. It&rsquo;s official, folks.</p>

<h2>The Obligatory <code>hello.rb</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Default is &quot;World&quot;</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="s2">&quot;World&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

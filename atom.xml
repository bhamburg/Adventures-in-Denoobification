<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bhamburg.github.io]]></title>
  <link href="http://bhamburg.github.io/atom.xml" rel="self"/>
  <link href="http://bhamburg.github.io/"/>
  <updated>2014-03-19T22:30:26-04:00</updated>
  <id>http://bhamburg.github.io/</id>
  <author>
    <name><![CDATA[Brian Hamburg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Treehouse]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/19/treehouse/"/>
    <updated>2014-03-19T18:10:03-04:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/19/treehouse</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always been told the best way to learn a language is to immerse yourself in it. I&rsquo;m also one to approach problems from several different angles to find a solution. Thus, I enrolled in <a href="http://teamtreehouse.com/tracks/rails-development">Treehouse&rsquo;s Rails track</a> as part of my 14-day free trial.</p>

<p>A couple of features that I like better than Code School include an iPad app and a responsively designed website, the latter of which actually allowed me to complete a few extremely basic HTML classes on the train tonight. I&rsquo;ve read that it is more for beginners than Code School, so I&rsquo;ll try to fly through what I know of HTML/CSS/JavaScript and fill in some gaps that I might have missed in my first few encounters with Ruby.</p>

<h2>It Just Works</h2>

<p>This Apple mantra drives a lot of techies nuts, especially the ones who have to diagnose and troubleshoot problems with Apple products. I get what their marketing department (Steve) was driving at though, and I appreciate the way they&rsquo;ve tried to idiot-proof their products so people can spend less time fixing them and more time getting work done.</p>

<p>Even though the install process did anything but &ldquo;just work,&rdquo; possibly due to the fact that I&rsquo;m using on a Mac, what I&rsquo;ve read so far about Rails gives me the same typical warm and fuzzies. Tedious business like writing SQL and developing everything from scratch gets taken care of by the magical Rails machine. It goes back to the concept of &ldquo;Convention Over Configuration&rdquo; which I touched on <a href="http://bhamburg.github.io/blog/2014/03/18/get-rolling/">yesterday</a>. Why reinvent the wheel when you could already be <a href="http://bhamburg.github.io/blog/2014/03/18/get-rolling/">rolling</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Rolling]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/18/get-rolling/"/>
    <updated>2014-03-18T18:23:12-04:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/18/get-rolling</id>
    <content type="html"><![CDATA[<p>After taking a much needed break from all things constructive to properly celebrate St. Patrick&rsquo;s Day while still in Boston, I&rsquo;m back on the Ruby train. Since I only had a little bit of time today, I listened to some <a href="http://www.buildingwebapps.com/transcript/79326-why-you-should-learn-ruby-on">free audio lessons about Ruby on Rails</a>, tried to install Rails on my Mac, failed hard, <a href="http://railsapps.github.io/installrubyonrails-mac.html">overcame failure</a>, poked around, and then try to reinforce what I&rsquo;m doing by reading some blog posts that praise Ruby and Ruby on Rails.</p>

<h2>Installing <code>Ruby On Rails</code></h2>

<figure class='code'><figcaption><span>Install Rails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% sudo gem install rails
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all it should take, they said. Developing on Rails is easy, they said. They didn&rsquo;t say how hard it might be to actually complete the install.</p>

<p>Part of my problem was that I was using the version of Ruby that ships with Mac OS X 10.9 Mavericks, which is known to have a security flaw. The recommended way to upgrade is to use <a href="https://rvm.io/">RVM</a>. From there I had to</p>

<ul>
<li>get <a href="http://brew.sh/">Homebrew</a></li>
<li>uninstall <a href="http://bitboxer.de/2010/06/03/moving-from-macports-to-homebrew/">MacPorts</a></li>
<li>update .bash_profile PATH to point to <code>/usr/local/bin:PATH</code> to stop some error messages</li>
<li>install Rails</li>
<li>and finally reinstall <a href="http://rake.rubyforge.org/">Rake</a> so I could blog about it on Octopress.</li>
</ul>


<p>Ruby On Rails is now up and running on my MacBook Pro with Mavericks. Now I must figure out what to do with it!</p>

<h2>Convention Over Configuration</h2>

<p>In the podcast above, I came across the concept of &ldquo;Convention Over Configuration&rdquo; as a main theme in Rails development. Sure, having the ability to customize and do things your own way is nice, and sometimes necessary, but why would you in most cases? Choice paralysis can be costly when time is money. This is a big reason I&rsquo;ve returned to the iPhone and Mac for personal productivity after dabbling with Android and Linux for a bit. Kyle Samani wrote a nice article on the concept <a href="http://kylesamani.com/blog/convention-configuration">here</a> and I originally talked about &ldquo;the cost of freedom&rdquo; on my main blog <a href="http://brianhamburg.com/2013/06/the-cost-of-freedom/">over here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MIT]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/11/mit/"/>
    <updated>2014-03-11T23:27:04-04:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/11/mit</id>
    <content type="html"><![CDATA[<p>Today was my first full day in Boston. I decided to go for a run across the Charles River to MIT&rsquo;s campus and back, I had to do some logo design work before diving back into Ruby but I eventually managed to complete level 4 of <a href="http://rubybits.codeschool.com/">Ruby Bits</a>. I found the exercises to be pretty easy in this level. It turns out that Active Support, while it&rsquo;s not included in the Ruby base install, it&rsquo;s includes some very powerful functions that make it simple to do some common tasks.</p>

<p>FYI: Active Support is released under the <a href="http://www.opensource.org/licenses/MIT">MIT license</a>.</p>

<h2>Active Support</h2>

<figure class='code'><figcaption><span>Install Active Support</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% <span class="o">[</span>sudo<span class="o">]</span> gem install activesupport
</span><span class='line'>% <span class="o">[</span>sudo<span class="o">]</span> gem install i18n <span class="c"># not required, but helpful</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Load Active Support in your Ruby app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Listen to Your Parents]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/10/dont-listen-to-your-parents/"/>
    <updated>2014-03-10T21:52:30-04:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/10/dont-listen-to-your-parents</id>
    <content type="html"><![CDATA[<p>Today was a travel day. Andrea has nurse practitioner conference all week in Boston so I took the opportunity to use some vacation time to accompany her and hang out in Beantown. Since I was away from an internet connection, I stayed productive by catching up on my reading and creating a Ruby program from scratch.</p>

<p>I&rsquo;m about halfway through <a href="http://www.amazon.com/The-Passionate-Programmer-Remarkable-Development/dp/1934356344"><em>The Passionate Programmer</em></a> and I&rsquo;m finding a ton of insight that I can relate to in this book. One chapter that really stood out was 6: &ldquo;Don&rsquo;t Listen To Your Parents.&rdquo; It&rsquo;s not as disrespectful as it sounds, and by no means is the author (or am I) trying to undermine the authority of parents of potential IT students everywhere. The main point he&rsquo;s trying to make is that the days of taking the safe and secure career path and staying at one job until retirement are over, especially for IT professionals. The following thoughts really hit home, especially regarding some recent conversations.</p>

<blockquote><p>More than any other third party you might look to, your parents are going to give you fear-driven advice. Fear-driven advice is geared toward <em>not losing</em>. Thinking about not losing is <em>not</em> the way to win! Winners take risks. They think about where they want to go&mdash;not where the rest of the pack is.</p></blockquote>

<p>The author goes on to explain this isn&rsquo;t just a rah-rah speech for individuals to follow their pie-in-the-sky dreams. There are logical, pragmatic reasons for a software developer to seek out a variety of experiences that can only come from having developed in multiple environments and having solved a variety of problems. In fact, he calls having only worked at one company a liability and a possible strike against a job candidate. Also, he aruges that truly enjoying one&rsquo;s work is the only way to become excellent and have a remarkable career.</p>

<p>Hear, hear.</p>

<h2>Ruby Practice: <code>99bottles.rb</code></h2>

<p>In an attempt to synthesize some of the concepts I&rsquo;ve learned from <a href="http://rubybits.codeschool.com/">Ruby Bits</a>, I created a program that uses inline <code>if</code> and <code>unless</code> statements to minimize the amount of code necessary to set default values and get the grammar correct for the lyrics to &ldquo;N Bottle(s) Of Beer On The Wall.&rdquo;</p>

<figure class='code'><figcaption><span>99bottles.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Get user&#39;s favorite beer</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;What is your favorite beer? (default is Sam Adams)</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">beer</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">beer</span> <span class="o">=</span> <span class="s2">&quot;Sam Adams&quot;</span> <span class="k">if</span> <span class="n">beer</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get user&#39;s number of bottles</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;How many bottles of </span><span class="si">#{</span><span class="n">beer</span><span class="si">}</span><span class="s2"> do you have? (default is 99)</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">99</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Print lyrics</span>
</span><span class='line'><span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;s&quot;</span> <span class="k">unless</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> bottle</span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2"> of </span><span class="si">#{</span><span class="n">beer</span><span class="si">}</span><span class="s2"> on the wall.</span><span class="se">\n</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> bottle</span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2"> of </span><span class="si">#{</span><span class="n">beer</span><span class="si">}</span><span class="s2">.</span><span class="se">\n</span><span class="s2">Take one down, pass it around.&quot;</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> bottle</span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2"> of </span><span class="si">#{</span><span class="n">beer</span><span class="si">}</span><span class="s2"> on the wall.</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/09/classes/"/>
    <updated>2014-03-09T19:32:48-04:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/09/classes</id>
    <content type="html"><![CDATA[<p>Part 3 of <a href="http://rubybits.codeschool.com/">Ruby Bits</a> introduces Ruby classes and the concepts of inheritance and encapsulation. This is an area I struggled with in my previous programming languages, which I admit is a big problem since this is pretty much the whole point of the &ldquo;object&rdquo; part of object-oriented programming. I feel like in previous attempts I didn&rsquo;t fully have my head wrapped around the relationships between parent and child classes and the private and public fields and methods within. I went through the motions and completed the homeworks but didn&rsquo;t really understand why it was important to build programs this way rather than doing a procedural-based alternative. I need to own these concepts and really dive into not just the &ldquo;what&rdquo; but also the &ldquo;why&rdquo; before moving on.</p>

<p>While the Ruby-specific examples I&rsquo;ve done are great, after poking around on YouTube for a bit I found another Code School video on Object-Oriented Programming by Brian Will. His explanations extremely clear and relevant and some of the cat analogies are pretty funny too.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('lbXsrHGhBAU');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/lbXsrHGhBAU?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/lbXsrHGhBAU/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=lbXsrHGhBAU" id="lbXsrHGhBAU" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Object-Oriented Programming</div>
</a>
<div class="video-info" >Part of a larger series teaching programming. See http://codeschool.org/</div>
</div>




<br />


<h2>Social Coding</h2>

<p>Also while searching for some insight on YouTube, I found this great video about the importance collaboration in software development. Brian Fitzpatrick and Ben Collins-Sussman explain how to avoid the trap of trying to be the solo genius developer and to &ldquo;gracefully exchange personal ego for personal growth.&rdquo; Check it out.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('0SARbwvhupQ');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/0SARbwvhupQ?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/0SARbwvhupQ/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=0SARbwvhupQ" id="0SARbwvhupQ" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Google I/O 2009 - The Myth of the Genius Programmer</div>
</a>
<div class="video-info" >Google I/O 2009 - The Myth of the Genius Programmer

Brian Fitzpatrick, Ben Collins-Sussman

A pervasive elitism hovers in the background of collaborative software development:  everyone secretly wants to be seen as a genius.  In this talk, we discuss how to avoid this trap and gracefully exchange personal ego for personal growth and super-charged collaboration.  We&#8217;ll also examine how software tools affect social behaviors, and how to successfully manage the growth of new ideas.

For presentation slides and all I/O sessions, please go to: code.google.com/events/io/sessions.html</div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code School]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/08/code-school/"/>
    <updated>2014-03-08T18:18:05-05:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/08/code-school</id>
    <content type="html"><![CDATA[<p>Despite marching in a parade with Fralinger and plans to go out with some friends tonight, I still managed to get through Level 1 and 2 of <a href="http://rubybits.codeschool.com/">Ruby Bits</a> since I already have a <a href="http://codeschool.com">Code School</a> subscription. I figured it would make sense to learn as much as I can using Code School and Codecademy as a primer before plunking down the cash for the <a href="http://pragmaticstudio.com/">Pragmatic Studio</a> course that I intend to take.</p>

<p>I&rsquo;ve been told there is no such thing as a bad workout and I suppose the same goes for a coding session. Even though I didn&rsquo;t have much time today, I still learned some important Ruby concepts such as the implied <code>nil</code> and short-circuit evaluation. Onward and upward tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Required Reading]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/07/required-reading/"/>
    <updated>2014-03-07T13:01:28-05:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/07/required-reading</id>
    <content type="html"><![CDATA[<p>Today I started reading <a href="http://www.amazon.com/The-Passionate-Programmer-Remarkable-Development/dp/1934356344"><em>The Passionate Programmer</em></a> by Chad Fowler. I&rsquo;m only a few chapters in after the train rides to and from work, but I can already say that this is a book I should have read years ago. The comparisons he draws between his career as a jazz musician and a software developer certainly hit home.</p>

<p>My favortie advice in the book so far comes from chapter 4 in which the author quotes jazz guitarist Pat Metheny, &ldquo;Always be the worst guy in every band you&rsquo;re in.&rdquo; This is really just a clever way to say, always keep company with those who may make you better. His point is that if you&rsquo;re continuously pushing yourself outside your comfort zone and surrounding yourself with people who are better than you are at a certain skill, you will almost automatically get better. I have found this to be true in my own life experiences.</p>

<p>I also picked up <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330"><em>Practical Object-Oriented Design in Ruby</em></a> by Sandi Metz, but I probably won&rsquo;t get to start that until at least next week. For now, I&rsquo;ll stick to the first book and do some online exercises in Git and Ruby.</p>

<h2>Codecademy</h2>

<p>As part of a requirement that I&rsquo;ve placed on myself for this journey to push code to GitHub every day, here is one of the early Ruby tutorials I&rsquo;ve completed on <a href="http://codecademy.com">Codecademy</a>. Variables with user input. Fancy-shmancy, indeed.</p>

<figure class='code'><figcaption><span>names.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Get user&#39;s first name</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;What&#39;s your first name? &quot;</span>
</span><span class='line'><span class="n">first_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="n">first_name</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get user&#39;s last name</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;What&#39;s your last name? &quot;</span>
</span><span class='line'><span class="n">last_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="n">last_name</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get user&#39;s city</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;From which city do you hail? &quot;</span>
</span><span class='line'><span class="n">city_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="n">city_name</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get user&#39;s state</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;From which state do you hail? &quot;</span>
</span><span class='line'><span class="n">state_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="n">state_name</span><span class="o">.</span><span class="n">upcase!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Display results</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Your name is </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">, and you&#39;re from </span><span class="si">#{</span><span class="n">city_name</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">state_name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installed Octopress]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/06/installed-octopress/"/>
    <updated>2014-03-06T22:11:14-05:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/06/installed-octopress</id>
    <content type="html"><![CDATA[<p>Today was a day of great progress. After reading up on the benefits of Octopress, I decided to delete my Jekyll repository and start from scratch with a clone of <a href="https://github.com/imathis/octopress">Octopress</a>. Since you are reading this, it means my installation was successful and I can now track my daily efforts towards denoobification. I admit that just the install turned out to be an excellent learning experience because the process didn&rsquo;t go as smoothly as the Octopress documentation lead me to believe it would.</p>

<h3>Not So Fast</h3>

<p>The first problem I noticed was that I was only running Ruby 1.8.7 since it is the default version in OS X Mountain Lion which is what I&rsquo;m running on this iMac. The Octopress documentation recommends to upgrade to Ruby 1.9.3 via <code>rbenv</code>. For reasons outlined in <a href="http://blog.zerosharp.com/installing-ruby-with-homebrew-and-rbenv-on-mac-os-x-mountain-lion/">this article</a>, I was unable to do so before installing GCC. After that crucial step I was back on track via the documentation to upgrade Ruby, install Octopress, deploy to GitHub Pages, and get to blogging!</p>

<h3>Portability Problem</h3>

<p>Another issue I ran into was the fact that I did my initial push from my iMac but would be doing most of my blogging from my laptop. This didn&rsquo;t hold me up for long thanks to another article on
<a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">zerosharp</a>.</p>

<h3>Learning The Lingo, Making it Mine</h3>

<p>Now that everything is up and running, the next step was to learn the lay of the land. The first thing I noticed is that Octopress blog posts use <a href="http://daringfireball.net/projects/markdown">Markdown</a>, which is something I have no prior experience with. After poking around for a few minutes, I managed to learn enough syntax to write this post (and go back and fix yesterday&rsquo;s post). I really like the ability to add <code>code</code> tags so easily.</p>

<p>I had a few hours when I got home tonight to get a feel for how Octopress is structured and managed to make some changes to <code>_layout.scss</code> and <code>_typography.scss</code> and added my logo to the header and favicon. Overall, I&rsquo;m very pleased with tonight&rsquo;s results. Here are before and after shots.</p>

<p><img src="http://bhamburg.github.io/images/before.png" style="height: 45%; width: 45%;" /> <img src="http://bhamburg.github.io/images/after.png" style="height: 45%; width: 45%; float: right;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commence Denoobification]]></title>
    <link href="http://bhamburg.github.io/blog/2014/03/05/commence-denoobification/"/>
    <updated>2014-03-05T21:07:14-05:00</updated>
    <id>http://bhamburg.github.io/blog/2014/03/05/commence-denoobification</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always been a dabbler. I used to dabble in DOS, Windows, and eventually Mac troubleshooting, and I eventually did it long enough to get my first real job doing technical support. I dabbled in banjo enough to make it to the front line of the <a href="http://fralinger.org">Fralinger String Band</a> and make a pretty steady side gig out of it. I dabbled in HTML, CSS, and JavaScript enough to turn it into a career as a front-end web developer. Since then, I&rsquo;ve dabbled in C++, Java, PHP, Python, and C# (the latter just enough to gain my <a href="http://brianhamburg.com/resume/">Sitecore developer certification</a> even though I much prefer working on my <a href="http://github.com/bhamburg">open-source projects</a>). With all of that dabbling, I&rsquo;ve become very much an IT generalist (that happens to play banjo too). A jackass of all trades, if you will. This has taken me pretty far in life, but even more importantly it has shown me how much I don&rsquo;t know, and should know, to take my career to the next level. Namely, a strong understanding of programming in real world applications.</p>

<h3>Become a <code>Ruby</code> Developer</h3>

<p>Just from conversations with my colleages and reading articles on the web, I started to gain an interest in taking my career further in open-source development. I&rsquo;ve heard of <a href="http://rubyonrails.org/">Ruby on Rails</a> and knew it was a hot trend in web dev, but I couldn&rsquo;t tell you much about it other than the seemingly well-paid pros were pretty cool characters who shared a lot on GitHub, often from a Mac. Then, in my daily Internet stumblings, I happened to read this page: <a href="http://rubycon.rkcudjoe.com/become-a-ruby-developer/">Become a Ruby Developer</a></p>

<p>I really like what Raymond Cudjoe has put together here and, based on the book reviews and other articles I read, his advice seems to be solid. I&rsquo;ve decided to dive into this guide and become a Ruby developer. My inner geek is calling me to get serious. <strong>Consider this <del>Jekyll</del> Octopress blog his <em>Retrospection #1</em> assignment.</strong> I plan to read <em>The Passionate Programmer</em> over the next week or so. I&rsquo;m looking forward to keeping track of everything that I have learned along the way on this blog.</p>

<h3>GitHub</h3>

<p>Prior to 2012, my only exposure to version control had been Dreamweaver&rsquo;s check-in feature. Once I started working at Jefferson Hospital, I was introduced to Subversion using a GUI without much command line interaction. My cursory knowledge of such an important aspect of a front- or back-end developer&rsquo;s world needs to change. I&rsquo;m going to make a concerted effort to become a Git expert and contribute to GitHub regularly as I learn Ruby and continue to work on my other projects. I&rsquo;ve found a good starting point in this effort to be <a href="http://gitimmersion.com/">Git Immersion</a>. Check out my very first Ruby program and contribution to GitHub below. It&rsquo;s official, folks.</p>

<h2>The Obligatory <code>hello.rb</code></h2>

<figure class='code'><figcaption><span>hello.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Default is &quot;World&quot;</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="s2">&quot;World&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
